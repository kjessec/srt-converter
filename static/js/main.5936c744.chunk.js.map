{"version":3,"sources":["convert.js","App.js","serviceWorker.js","index.js"],"names":["leftpad","str","length","concat","convertTime","timestr","s","split","convertSrt","content","map","line","filter","lineElem","idx","arr","reduce","t","noop","divStyle","display","width","verticalAlign","textareaStyle","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tsvContent","tsvResult","error","tsvConvert","bind","assertThisInitialized","setState","convert","e","toString","_this2","_this$state","resultSection","react_default","a","createElement","onDoubleClick","ev","target","select","style","value","onChange","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAAMA,SAAU,SAAAC,GAAG,OAAmB,IAAfA,EAAIC,OAAeD,EAAnB,IAAAE,OAA6BF,KAC9CG,EAAc,SAAAC,GAClB,IAAIA,EAAS,OAAO,KACpB,IAAMC,EAAID,EAAQE,MAAM,KACxB,YAAAJ,OAAaH,EAAQM,EAAE,IAAvB,KAAAH,OAA8BH,EAAQM,EAAE,IAAxC,KAAAH,OAA+CG,EAAE,KAKpC,SAASE,EAAWC,GACjC,OAAOA,EACJF,MAAM,MACNG,IAAI,SAAAC,GAAI,OAAIA,EAAKJ,MAAM,QACvBK,OAAO,SAAAD,GAAI,QAAMA,EAAK,KACtBD,IAAI,SAACG,EAAUC,EAAKC,GAAhB,MAAwB,IAAAZ,OACxBC,EAAYS,EAAS,IADG,YAAAV,OACQC,EAAYW,EAAID,EAAI,IAAMC,EAAID,EAAI,GAAG,KACxED,EAAS,MAGVG,OAAO,SAACV,EAAGW,GAAJ,OAAUX,EAAI,OAASW,EAAE,GAAK,KAAOA,EAAE,IAAI,ICfvD,IAAMC,EAAO,aACPC,EAAW,CAAEC,QAAS,eAAgBC,MAAO,MAAMC,cAAe,OAClEC,EAAgB,CAAEF,MAAO,OA2ChBG,cAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,GACZC,UAAW,GACXC,MAAO,MAETV,EAAKW,WAAaX,EAAKW,WAAWC,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPDA,0EAURjB,GACT,IACEoB,KAAKW,SAAS,CAAEL,UAAWM,EAAQhC,GAAU2B,MAAO,OACpD,MAAMM,GACNb,KAAKW,SAAS,CAAEJ,MAAOM,EAAEC,+CAIpB,IAAAC,EAAAf,KAAAgB,EACsBhB,KAAKI,MAA1BG,EADDS,EACCT,MAAOD,EADRU,EACQV,UACTW,EAAiBV,EACnBW,EAAAC,EAAAC,cAAA,WAAMb,GACNW,EAAAC,EAAAC,cAAA,YAAUC,cAAe,SAAAC,GAAE,OAAIA,EAAGC,OAAOC,UAAUC,MAAO/B,EAAegC,MAAOpB,EAAWqB,SAAUtC,IAGzG,OACE6B,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEG,OAAQ,SACpBV,EAAAC,EAAAC,cAAA,OAAKK,MAAOnC,GACV4B,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,YAAUK,MAAO/B,EAAeiC,SAAU,SAAAL,GAAE,OAAIP,EAAKP,WAAWc,EAAGC,OAAOG,WAE5ER,EAAAC,EAAAC,cAAA,OAAKK,MAAOnC,GACV4B,EAAAC,EAAAC,cAAA,0EACCH,WAlCOY,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5936c744.chunk.js","sourcesContent":["const leftpad = str => str.length === 2 ? str : `0${str}`;\nconst convertTime = timestr => {\n  if(!timestr) return null;\n  const s = timestr.split('.');\n  return `00:${leftpad(s[0])}:${leftpad(s[1])},${s[2]}`;\n};\n\n// single locale only\n// takes .tsv only\nexport default function convertSrt(content) {\n  return content\n    .split('\\n')\n    .map(line => line.split('\\t'))\n    .filter(line => !!line[0])\n    .map((lineElem, idx, arr) => [\n      `${convertTime(lineElem[0])} --> ${convertTime(arr[idx+1] && arr[idx+1][0])}`,\n      lineElem[1],\n      // lineElem[2]\n    ])\n    .reduce((s, t) => s + '\\n\\n' + t[0] + '\\n' + t[1], '');\n}\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport convert from './convert';\nconst noop = () => {};\nconst divStyle = { display: 'inline-block', width: '45%',verticalAlign: 'top' };\nconst textareaStyle = { width: '80%' };\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tsvContent: '',\n      tsvResult: '',\n      error: null\n    };\n    this.tsvConvert = this.tsvConvert.bind(this);\n  }\n\n  tsvConvert(content) {\n    try {\n      this.setState({ tsvResult: convert(content), error: null });\n    } catch(e) {\n      this.setState({ error: e.toString() });\n    }\n  }\n\n  render() {\n    const { error, tsvResult } = this.state;\n    const resultSection = (error\n      ? <div>{error}</div>\n      : <textarea onDoubleClick={ev => ev.target.select()} style={textareaStyle} value={tsvResult} onChange={noop}></textarea>\n    );\n\n    return (\n      <div style={{ height: '100%' }}>\n        <div style={divStyle}>\n          <h1>1. Please insert .tsv content here</h1>\n          <textarea style={textareaStyle} onChange={ev => this.tsvConvert(ev.target.value)}/>\n        </div>\n        <div style={divStyle}>\n          <h1>2. Grab your converted srt here (double click to select all)</h1>\n          {resultSection}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}